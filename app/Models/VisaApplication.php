<?php

namespace App\Models;

use App\Lib\MemberType;
use App\Lib\VisaApplicationStatus;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use OpenApi\Annotations as OA;

class VisaApplication extends Model {
    use HasFactory;

    const LONG_TERM_STAY    = 10;
    const SHORT_TERM_STAY   = 20;

    protected $fillable = [
        'user_id', 'consulting_user_id', 'attorney_user_id', 'order_stay_period', 'order_stay_status', 'status', 'invalid_fields'
    ];

    protected $casts = [
        'created_at' => 'datetime:Y-m-d H:i:s',
        'updated_at' => 'datetime:Y-m-d H:i:s',
    ];

    /**
     * find 대용, 리턴 타입 설정 문제로 사용
     * @param $id
     * @return VisaApplication|null
     */
    public static function findMe(?int $id = null) : ?VisaApplication {
        if(!$id) return null;
        return static::find($id);
    }

    /**
     * 비자정보 삭제시 관련 저장 파일도 삭제하도록 한다.
     * @return bool|null
     */
    public function delete() {
        VisaPhoto::findByVisa($this)?->delete();
        VisaPassport::findByVisa($this)?->delete();
        VisaVisitDetail::findByVisa($this)->delete();
        $documents = VisaDocument::findByVisa($this);
        foreach($documents as $document) $document?->delete();
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /**
     * 컨설팅 가능 여부를 판단한다.
     * @return bool
     */
    public function isConsultAble() : bool {
        return (!$this->consulting_user_id && $this->status == VisaApplicationStatus::STATUS_REGISTRATION_COMPLETE->value);
    }

    /**
     * 컨설팅 상태 여부플 판단한다.
     * @return bool
     */
    public function isConsulting() : bool {
        return ($this->consulting_user_id &&
            $this->status >= VisaApplicationStatus::STATUS_START_PREVIEW->value &&
            $this->status <= VisaApplicationStatus::STATUS_ISSUE_AVAILABLE->value);
    }

    /**
     * 비자발급 업무 지정 가능 여부를 판단한다.
     * @return bool
     */
    public function isAssignAble() : bool {
        return ($this->status >= VisaApplicationStatus::STATUS_ISSUE_AVAILABLE->value);
    }

    /**
     * 바자발급 절차 진행 상태 여부를 판단한다.
     * @return bool
     */
    public function isInIssueProcess() : bool {
        return ($this->attorney_user_id && in_array($this->status, [
                VisaApplicationStatus::STATUS_ISSUE_APPLICATION->value,
                VisaApplicationStatus::STATUS_ISSUE_REJECT->value,
        ]));
    }

    /**
     * 회원 유형에 따라 설정 가능한 상태를 리턴한다.
     * @param MemberType $member_type
     * @return array
     */
    private static function _ableStatus(MemberType $member_type) : array {
        return match ($member_type) {
            MemberType::TYPE_ATTORNEY => [
                VisaApplicationStatus::STATUS_START_PREVIEW,
                VisaApplicationStatus::STATUS_ISSUE_IMPOSSIBLE,
                VisaApplicationStatus::STATUS_ISSUE_AVAILABLE,
                VisaApplicationStatus::STATUS_ISSUE_PREVIEW,
                VisaApplicationStatus::STATUS_ISSUE_APPLICATION,
                VisaApplicationStatus::STATUS_ISSUE_REJECT,
                VisaApplicationStatus::STATUS_ISSUE_COMPLETE
            ],
            MemberType::TYPE_FOREIGN_PERSON, MemberType::TYPE_FOREIGN_MANAGER => [
                VisaApplicationStatus::STATUS_REGISTERING,
                VisaApplicationStatus::STATUS_REGISTRATION_COMPLETE,
                VisaApplicationStatus::STATUS_ISSUE_PROCESS_REQUEST
            ],
            default => []
        };
    }

    /**
     * 회원 유형에 따른 상태 설정 가능 여부를 판단한다.
     * @param VisaApplicationStatus $status
     * @param MemberType $type
     * @return bool
     */
    public static function isAbleStatus(VisaApplicationStatus $status, MemberType $type) : bool {
        if (in_array($status, static::_ableStatus($type))) return true;
        return false;
    }

    /**
     * 컨설팅 또는 발급절차 진행 여부에 따른 상태 설정 가능 여부를 판단한다.
     * @param User $user
     * @param VisaApplicationStatus $status
     * @return bool
     */
    public function isAbleStatusForAttorney(User $user, VisaApplicationStatus $status) : bool {
        $able_status = [];
        if($this->consulting_user_id == $user->id) $able_status += [
            VisaApplicationStatus::STATUS_START_PREVIEW,
            VisaApplicationStatus::STATUS_ISSUE_IMPOSSIBLE,
            VisaApplicationStatus::STATUS_ISSUE_AVAILABLE,
        ];

        if($this->attorney_user_id == $user->id) $able_status += [
            VisaApplicationStatus::STATUS_ISSUE_PREVIEW,
            VisaApplicationStatus::STATUS_ISSUE_APPLICATION,
            VisaApplicationStatus::STATUS_ISSUE_REJECT,
            VisaApplicationStatus::STATUS_ISSUE_COMPLETE
        ];

        return in_array($status, $able_status);
    }

    /**
     * 비자발급에 필요한 문서 목록을 배열로 리턴한다.
     * @param VisaApplication $visa
     * @return array
     */
    private function _listVisaDocument(?string $api_version = 'v1') : array {
        $documents = VisaDocument::where('visa_application_id', $this->id)->get();
        $ret = [];
        foreach($documents as $document) $ret[] = $document->toInfoArray($api_version);
        return $ret;
    }

    /**
     * 비자정보를 배열로 리턴한다.
     * @param string|null $api_version
     * @param bool|null $include_consulting_attorney
     * @return array
     * @OA\Schema (
     *     schema="visa_master_info",
     *     title="비자마스터 정보",
     *     @OA\Property (
     *          property="id",
     *          type="integer",
     *          description="일련번호",
     *     ),
     *     @OA\Property (
     *          property="user",
     *          ref="#/components/schemas/simple_user_info",
     *          description="근로자 계정 요약 정보",
     *     ),
     *     @OA\Property (
     *          property="consulting_user",
     *          ref="#/components/schemas/simple_user_info",
     *          description="컨설턴트 계정 요약 정보",
     *     ),
     *     @OA\Property (
     *          property="attorney_user",
     *          ref="#/components/schemas/simple_user_info",
     *          description="배정된 행정사 계정 요약 정보",
     *     ),
     *     @OA\Property (
     *          property="order_stay_period",
     *          type="integer",
     *          description="체류기간 구분",
     *     ),
     *     @OA\Property (
     *          property="order_stay_status",
     *          type="integer",
     *          description="체류자격",
     *     ),
     *     @OA\Property (
     *          property="status",
     *          type="integer",
     *          description="처리상태",
     *     ),
     *     @OA\Property (
     *         property="invalid_fields",
     *         type="object",
     *         description="잘못된 데이터 또는 검토가 필요한 필드 항목"
     *     ),
     *     @OA\Property (
     *          property="created_at",
     *          type="string",
     *          format="date-time",
     *          description="메시지"
     *     ),
     *     @OA\Property (
     *          property="updated_at",
     *          type="string",
     *          format="date-time",
     *          description="메시지"
     *     )
     * )
     *
     * @OA\Schema (
     *     schema="visa_info",
     *     title="비자정보 부속 황목 모두 포함",
     *     @OA\Property(property="master_info", ref="#/components/schemas/visa_master_info"),
     *     @OA\Property(property="issued_info", ref="#/components/schemas/visa_issued_info"),
     *     @OA\Property(property="photo", type="string", description="사진파일 URL"),
     *     @OA\Property(property="profile", ref="#/components/schemas/visa_profile"),
     *     @OA\Property(property="passport", ref="#/components/schemas/visa_passport"),
     *     @OA\Property(property="contact", ref="#/components/schemas/visa_contact"),
     *     @OA\Property(property="family", ref="#/components/schemas/visa_family"),
     *     @OA\Property(property="education", ref="#/components/schemas/visa_education"),
     *     @OA\Property(property="employment", ref="#/components/schemas/visa_employment"),
     *     @OA\Property(property="visit_detail", ref="#/components/schemas/visa_visit_detail"),
     *     @OA\Property(property="invitor", ref="#/components/schemas/visa_invitor"),
     *     @OA\Property(property="cost", ref="#/components/schemas/visa_cost"),
     *     @OA\Property(property="assistant", ref="#/components/schemas/visa_assistant"),
     *     @OA\Property(property="documents", type="array", @OA\Items(type="object", ref="#/components/schemas/visa_document")),
     *     @OA\Property(property="consulting_messages", ref="#/components/schemas/visa_consulting_message_list")
     * )
     */
    public function toInfoArray(?string $api_version = 'v1', ?bool $include_consulting_attorney = false) : array {
        return [
            'master_info' => [
                'id' => $this->id,
                'user' => User::findMe($this->user_id)?->toSimpleArray(),
                'consulting_user' => User::findMe($this->consulting_user_id)?->toSimpleArray(),
                'attorney_user' => User::findMe($this->attorney_user_id)?->toSimpleArray(),
                'order_stay_period' => $this->order_stay_period,
                'order_stay_status' => $this->order_stay_status,
                'status' => $this->status,
                'invalid_fields' => $this->invalid_fields ? json_decode($this->invalid_fields) : null,
                'created_at' => $this->created_at,
                'updated_at' => $this->updated_at
            ],
            'issued_info' => VisaApplicationIssuedInfo::findByVisa($this)?->toInfoArray(),
            'photo' => VisaPhoto::findByVisa($this)?->routePath($api_version),
            'profile' => VisaProfile::findByVisa($this)?->toInfoArray(),
            'passport' => VisaPassport::findByVisa($this)?->toInfoArray($api_version),
            'contact' => VisaContact::findByVisa($this)?->toInfoArray(),
            'family' => VisaFamily::findByVisa($this)?->toInfoArray(),
            'education' => VisaEducation::findByVisa($this)?->toInfoArray(),
            'employment' => VisaEmployment::findByVisa($this)?->toInfoArray(),
            'visit_detail' => VisaVisitDetail::findByVisa($this)?->toInfoArray(),
            'invitor' => VisaInvitor::findByVisa($this)?->toInfoArray(),
            'cost' => VisaCost::findByVisa($this)?->toInfoArray(),
            'assistant' => VisaAssistant::findByVisa($this)?->toInfoArray(),
            'documents' => $this->_listVisaDocument($api_version),
            'consulting_messages' => ConsultingMessage::listByVisa($this),
            'request_consulting_permissions' => $include_consulting_attorney ? RequestConsultingPermission::listRequestedAttorney($this): null
        ];
    }

    /**
     * 현재 상태에가 변경 가능 상태인지 판단한다.
     * @return bool
     */
    public function isUpdateAble() : bool {
        $s = VisaApplicationStatus::tryFrom($this->status);
        return $s->isUpdateAble();
    }

    /**
     * 현재 상태가 삭제 가능 상태인지 판단한다.
     * @return bool
     */
    public function isDeleteAble() : bool {
        $s = VisaApplicationStatus::tryFrom($this->status);
        return $s?->isDeleteAble();
    }
}

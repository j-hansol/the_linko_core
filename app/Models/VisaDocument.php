<?php

namespace App\Models;

use Exception;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use OpenApi\Annotations as OA;

class VisaDocument extends Model {
    use HasFactory;

    protected $fillable = [
        'visa_application_id', 'user_id', 'type_id', 'title', 'file_path'
    ];

    protected $casts = [
        'created_at' => 'datetime:Y-m-d H:i:s',
        'updated_at' => 'datetime:Y-m-d H:i:s',
    ];

    /**
     * 리턴 타입을 위해 이용
     * @param int|null $id
     * @return VisaDocument|null
     */
    public static function findMe(?int $id) : ?VisaDocument {
        if(!$id) return null;
        return static::find($id);
    }

    /**
     * 지정 문서 유형의 문서 개수를 리턴한다.
     * @param VisaDocumentType $type
     * @return int
     */
    public static function countDocumentByType(VisaDocumentType $type) : int {
        return static::where('type_id', $type->id)->count();
    }

    /**
     * 문서를 저장한다.
     * @param UploadedFile $file
     * @return string
     */
    public static function saveFile(UploadedFile $file) : string {
        return $file->store('visa_documents', 'local');
    }

    /**
     * @param array $data
     * @return void
     * @throws Exception
     */
    public function updateDocument(array $data) : void {
        try {
            if($this->file_path) Storage::disk('local')->delete($this->file_path);
            $this->fill($data);
            $this->save();
        } catch (Exception $e) {
            throw $e;
        }
    }

    /**
     * 삭제시 저장 파일도 삭제한다.
     * @return bool|null
     */
    public function delete() {
        if($this->file_path) Storage::disk('local')->delete($this->file_path);
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /**
     * 지정 비자신층을 위한 문서 목록을 리턴한다.
     * @param VisaApplication $visa
     * @return Collection
     */
    public static function findByVisa(VisaApplication $visa) : Collection {
        return VisaDocument::where('visa_application_id', $visa->id)->get();
    }

    /**
     * 문서정보를 배열로 리턴한다.
     * @param string|null $api_version
     * @return array
     * @OA\Schema(
     *     schema="visa_document",
     *     title="비자발급시 필요한 문서",
     *     @OA\Property (
     *          property="id",
     *          type="integer",
     *          description="일련번호",
     *     ),
     *     @OA\Property (property="type",  ref="#/components/schemas/visa_document_type"),
     *     @OA\Property (
     *          property="title",
     *          type="string",
     *          description="문서제목",
     *     ),
     *     @OA\Property (
     *          property="file",
     *          type="string",
     *          description="파일 저장 경로",
     *     ),
     *     @OA\Property (
     *          property="created_at",
     *          type="string",
     *          format="date-time",
     *          description="등록일시",
     *     ),
     *     @OA\Property (
     *          property="updated_at",
     *          type="string",
     *          format="date-time",
     *          description="변경일시",
     *     )
     * )
     */
    public function toInfoArray(?string $api_version = 'v1') : array {
        return [
            'id' => $this->id,
            'type' => VisaDocumentType::findMe($this->type_id)->toArray(),
            'title' => $this->title,
            'file' => route("api.${api_version}.visa.show_visa_document", ['id' => $this->id, '_token' => access_token()]),
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at
        ];;
    }

    /**
     * 현재 업로드된 문서가 필수 업로드가 필요한 문서인지 여부를 판단한다.
     * @return bool
     */
    public function isRequiredDocument() : bool {
        return VisaDocumentType::findMe($this->type_id)?->required == 1;
    }

    /**
     * 파일 경로 저장 필드 및 저장 경로를 리턴한다.
     * @return array
     */
    public static function basePath() : array {
        return [
            'file_path' => 'visa_documents',
        ];
    }
}

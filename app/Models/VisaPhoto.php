<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use OpenApi\Annotations as OA;

class VisaPhoto extends Model
{
    use HasFactory;

    protected $fillable = [
        'visa_application_id', 'user_id', 'file_path'
    ];

    protected $casts = [
        'created_at' => 'datetime:Y-m-d H:i:s',
        'updated_at' => 'datetime:Y-m-d H:i:s',
    ];

    /**
     * 비자 발급에 사용된 사진정보를 ㄹ기턴한다.
     * @param VisaApplication $visa
     * @return VisaPhoto|null
     */
    public static function findByVisa(VisaApplication $visa) : ?VisaPhoto {
        return static::where('visa_application_id', $visa->id)->get()->first();
    }

    /**
     * 회원 사진을 저장한다.
     * @param UploadedFile $photo
     * @return string
     */
    public static function savePhoto(UploadedFile $photo) : string {
        return $photo->store('visa_photos', 'local');
    }

    /**
     * 비자정보와 업로드 파일을 이용하여 비자발급에 사용될 사진을 등록한다.
     * @param VisaApplication $visa
     * @param UploadedFile $photo
     * @return VisaPhoto|null
     */
    public static function createFrom(VisaApplication $visa, UploadedFile $photo) : ?VisaPhoto {
        DB::beginTransaction();
        try {
            $file_path = static::savePhoto($photo);
            $model = static::create([
                'visa_application_id' => $visa->id, 'user_id' => $visa->user_id, 'file_path' => $file_path
            ]);
            DB::commit();
            return $model;
        } catch (\Exception $e) {
            DB::rollBack();
            return null;
        }
    }

    /**
     * 업로드된 이미지로 사진을 갱신한다.
     * @param UploadedFile $photo
     * @return void
     */
    public function updatePhoto(UploadedFile $photo) : void {
        $file_path = self::savePhoto($photo);
        if($file_path) {
            if($this->file_path) Storage::disk('local')->delete($this->file_path);
            $this->file_path = $file_path;
            $this->save();
        }
    }

    /**
     * 삭제시 저장된 사진 파일도 삭제되도록 한다.
     * @return bool|null
     */
    public function delete() {
        if($this->file_path) Storage::disk('local')->delete($this->file_path);
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /**
     * 사진을 출력하는 경로를 출력한다.
     * @param string|null $api_version
     * @return string|null
     */
    public function routePath(?string $api_version = 'v1') : ?string {
        return route("api.${api_version}.visa.show_photo", ['id' => $this->id, '_token' => access_token()]);
    }

    /**
     * 파일 경로 저장 필드 및 저장 경로를 리턴한다.
     * @return array
     */
    public static function basePath() : array {
        return [
            'file_path' => 'visa_photos',
        ];
    }
}
